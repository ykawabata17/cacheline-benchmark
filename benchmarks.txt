-----------------------------------------------------
C のコード
main の row_col と col_row を付け替えてコンパイルして検証してました

#include <stdio.h>
#include <stdlib.h>

#define SIZE 10240

// メモリの初期化
int** setup() {
    int** a = (int**)malloc(SIZE * sizeof(int*));
    for (int i = 0; i < SIZE; i++) {
        a[i] = (int*)calloc(SIZE, sizeof(int));
    }
    return a;
}

// 行列の要素に1を加算（行→列）
void row_col(int** a) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            a[i][j] += 1;
        }
    }
}

// 行列の要素に1を加算（列→行）
void col_row(int** a) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            a[j][i] += 1;
        }
    }
}

// メモリの解放
void cleanup(int** a) {
    for (int i = 0; i < SIZE; i++) {
        free(a[i]);
    }
    free(a);
}

int main() {
    int** a = setup();
    
    // row_col(a);
    col_row(a);

    cleanup(a);
    return 0;
}
-----------------------------------------------------
Rust のコード
row_col と col_row を付け替えてコンパイルして検証してました

const SIZE: usize = 10240;

fn setup() -> Vec<Vec<i32>> {
    vec![vec![0; SIZE]; SIZE]
}

// fn row_col(matrix: &mut Vec<Vec<i32>>) {
//     for i in 0..SIZE {
//         for j in 0..SIZE {
//             matrix[i][j] += 1;
//         }
//     }
// }

fn col_row(matrix: &mut Vec<Vec<i32>>) {
    for i in 0..SIZE {
        for j in 0..SIZE {
            matrix[j][i] += 1;
        }
    }
}

fn main() {
    let mut matrix = setup();

    // row_col(&mut matrix);
    col_row(&mut matrix);
}
-----------------------------------------------------
Python のコード
同じく

import numpy as np

def setup():
    return np.zeros((10240, 10240), dtype=int)

def row_col(a):
    for i in range(10240):
        for j in range(10240):
            a[i][j] += 1

def col_row(a):
    for i in range(10240):
        for j in range(10240):
            a[j][i] += 1

if __name__ == '__main__':
    # row_col(setup())
    col_row(setup())
-----------------------------------------------------
go のコード
同じく

package main

const SIZE = 10240

// メモリの初期化
func setup() [][]int {
    matrix := make([][]int, SIZE)
    for i := range matrix {
        matrix[i] = make([]int, SIZE)
    }
    return matrix
}

// 行列の要素に1を加算（行→列）
func rowCol(matrix [][]int) {
    for i := 0; i < SIZE; i++ {
        for j := 0; j < SIZE; j++ {
            matrix[i][j] += 1
        }
    }
}

// 行列の要素に1を加算（列→行）
func colRow(matrix [][]int) {
    for i := 0; i < SIZE; i++ {
        for j := 0; j < SIZE; j++ {
            matrix[j][i] += 1
        }
    }
}

func main() {
    matrix := setup()
    
    // rowCol(matrix)
    colRow(matrix)
}
-----------------------------------------------------